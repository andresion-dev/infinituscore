trigger:
  branches:
    include:
      - main

variables:
- name: dnsResourceGroup
  value: 'rg-ntier'
- name: dnsZoneName
  value: 'infinituscore.com'
- name: dnsRecordSet
  value: 'www'

pool:
  vmImage: 'windows-latest'

stages:
- stage: ExecutarScripts
  displayName: 'Executar Scripts PowerShell do Projeto'
  jobs:
  - job: ExecutarTodosScripts
    displayName: 'Executar .ps1 da pasta Script/'
    steps:

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "======================"
          Write-Host "Estrutura da árvore do repositório:"
          Get-ChildItem -Path "$(Build.SourcesDirectory)" -Recurse | Select-Object FullName
          Write-Host "======================"
      displayName: 'Listar estrutura completa do repositório'

    - task: AzureCLI@2
      name: GetAppGwIp
      inputs:
        azureSubscription: 'AzureServiceConnection'
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          $publicIp = az network public-ip show `
            --resource-group rg-ntier `
            --name appGatewayPublicIp `
            --query "ipAddress" `
            --output tsv
          Write-Host "##vso[task.setvariable variable=applicationGatewayIp]$publicIp"
          Write-Host "IP público capturado: $publicIp"
      displayName: 'Obter IP público do Application Gateway'

    - task: AzureCLI@2
      inputs:
        azureSubscription: 'AzureServiceConnection'
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          $scriptPath = "$(Build.SourcesDirectory)/Script/16-deploy-Criar um registro DNS.ps1"
          & $scriptPath `
            -ip "$(applicationGatewayIp)" `
            -resourceGroup "$(dnsResourceGroup)" `
            -zoneName "$(dnsZoneName)" `
            -recordSetName "$(dnsRecordSet)"
      displayName: 'Criar registro DNS com IP do App Gateway'

    - task: AzureCLI@2
      inputs:
        azureSubscription: 'AzureServiceConnection'
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          $scriptPath = "$(Build.SourcesDirectory)/Script"
          $scripts = Get-ChildItem $scriptPath -Filter *.ps1 | Where-Object { $_.Name -notlike "16-deploy-Criar um registro DNS.ps1" } | Sort-Object Name

          foreach ($script in $scripts) {
              Write-Host "Executando $($script.Name)..."
              & $script.FullName
          }
      displayName: 'Executar os demais scripts autenticados'


